#!/bin/bash
# MCP Service Launcher - Prevents duplicate instances and manages service lifecycle

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BASE_DIR="$(dirname "$SCRIPT_DIR")"
REGISTRY_FILE="$BASE_DIR/registry/services.yaml"
ENV_FILE="${MCP_ENV_FILE:-$HOME/.config/mcp/.env}"
LOG_DIR="${MCP_LOG_DIR:-$HOME/.mcp/logs}"
PID_DIR="${MCP_PID_DIR:-$HOME/.mcp/pids}"

# Ensure directories exist
mkdir -p "$LOG_DIR" "$PID_DIR"

# Service to launch
SERVICE=$1

if [[ -z "$SERVICE" ]]; then
    echo "Usage: mcp-launcher <service-name>" >&2
    exit 1
fi

# Check if service exists in registry
if ! yq eval ".services.$SERVICE" "$REGISTRY_FILE" >/dev/null 2>&1; then
    echo "Error: Service '$SERVICE' not found in registry" >&2
    exit 1
fi

# Get service configuration
PORT=$(yq eval ".services.$SERVICE.port" "$REGISTRY_FILE")
COMMAND=$(yq eval ".services.$SERVICE.command // \"\"" "$REGISTRY_FILE")
NAME=$(yq eval ".services.$SERVICE.name" "$REGISTRY_FILE")

# Check for existing instance
PID_FILE="$PID_DIR/$SERVICE.pid"
if [[ -f "$PID_FILE" ]]; then
    OLD_PID=$(cat "$PID_FILE")
    if kill -0 "$OLD_PID" 2>/dev/null; then
        echo "Service '$SERVICE' is already running (PID: $OLD_PID)"
        exit 0
    else
        echo "Removing stale PID file"
        rm -f "$PID_FILE"
    fi
fi

# Check if port is already in use
if lsof -i ":$PORT" >/dev/null 2>&1; then
    echo "Error: Port $PORT is already in use" >&2
    exit 1
fi

# Load environment variables
if [[ -f "$ENV_FILE" ]]; then
    echo "Loading environment from $ENV_FILE"
    set -a
    # Source env file, filtering out comments and empty lines
    while IFS='=' read -r key value; do
        if [[ -n "$key" && ! "$key" =~ ^[[:space:]]*# ]]; then
            export "$key=$value"
        fi
    done < <(grep -v '^[[:space:]]*#' "$ENV_FILE" | grep -v '^[[:space:]]*$')
    set +a
fi

# Load service-specific environment variables
ENV_VARS=$(yq eval ".services.$SERVICE.env_vars[]? // \"\"" "$REGISTRY_FILE")
if [[ -n "$ENV_VARS" ]]; then
    echo "Required environment variables:"
    while IFS= read -r var; do
        if [[ -n "$var" && -n "${!var:-}" ]]; then
            echo "  ✓ $var is set"
        else
            echo "  ✗ $var is missing" >&2
        fi
    done <<< "$ENV_VARS"
fi

# Prepare log file
LOG_FILE="$LOG_DIR/$SERVICE.log"
echo "=== Starting $NAME at $(date) ===" >> "$LOG_FILE"

# Launch the service
echo "Starting $NAME on port $PORT..."

if [[ -z "$COMMAND" ]]; then
    echo "Error: No command specified for service '$SERVICE'" >&2
    exit 1
fi

# Function to cleanup on exit
cleanup() {
    echo "Stopping $NAME..."
    if [[ -f "$PID_FILE" ]]; then
        rm -f "$PID_FILE"
    fi
}
trap cleanup EXIT

# Start the service in background
(
    # Set process name for easier identification
    exec -a "mcp-$SERVICE" $COMMAND
) >> "$LOG_FILE" 2>&1 &

# Save PID
SERVICE_PID=$!
echo "$SERVICE_PID" > "$PID_FILE"

# Wait a moment to ensure service starts
sleep 2

# Check if service is still running
if kill -0 "$SERVICE_PID" 2>/dev/null; then
    echo "✅ $NAME started successfully (PID: $SERVICE_PID)"
    echo "   Port: $PORT"
    echo "   Logs: $LOG_FILE"
    
    # Keep script running to maintain the service
    wait "$SERVICE_PID"
else
    echo "❌ Failed to start $NAME" >&2
    echo "   Check logs at: $LOG_FILE" >&2
    tail -20 "$LOG_FILE" >&2
    exit 1
fi